namespace "managarm::posix";

enum Errors {
	SUCCESS = 0,
	DEAD_FORK = 6,
	ILLEGAL_REQUEST = 4,
	ILLEGAL_ARGUMENTS = 9,
	FILE_NOT_FOUND = 1,
	ACCESS_DENIED = 2,
	ALREADY_EXISTS = 3,
	NO_SUCH_FD = 5,
	END_OF_FILE = 7,
	BAD_FD = 8,
	WOULD_BLOCK = 10,
	BROKEN_PIPE = 11,
	NOT_SUPPORTED = 12,
	RESOURCE_IN_USE = 13,
	ILLEGAL_OPERATION_TARGET = 14,
	NOT_A_DIRECTORY = 15,
	NO_BACKING_DEVICE = 16,
	NO_SUCH_RESOURCE = 17,
	INSUFFICIENT_PERMISSION = 18,
	IS_DIRECTORY = 19
}

consts CntReqType uint32 {
	INIT = 7,
	GET_PID = 17,
	FORK = 8,
	EXEC = 1,
	WAIT = 56,
	VM_REMAP = 43,
	VM_PROTECT = 62,
	VM_UNMAP = 27,

	MOUNT = 21,
	CHROOT = 24,
	CHDIR = 58,
	FCHDIR = 61,
	ACCESSAT = 20,
	MKDIRAT = 46,
	SYMLINKAT = 47,
	READLINK = 31,
	READ = 3,
	WRITE = 4,
	SEEK_ABS = 13,
	SEEK_REL = 14,
	SEEK_EOF = 15,
	DUP = 34,
	DUP2 = 6,
	TTY_NAME = 18,
	GETCWD = 59,
	FD_GET_FLAGS = 44,
	FD_SET_FLAGS = 45,
	GET_RESOURCE_USAGE = 57,

	// Session and process group calls.
	SETSID = 76,

	// Signal-specific calls.
	SIG_ACTION = 55,

	// FIFO- and pipe-specific calls.
	PIPE_CREATE = 52,

	// epoll-specific calls.
	EPOLL_CALL = 54,
	EPOLL_CREATE = 28,
	EPOLL_ADD = 37,
	EPOLL_MODIFY = 38,
	EPOLL_DELETE = 39,
	EPOLL_WAIT = 30,

	// signalfd()-specific calls
	SIGNALFD_CREATE = 32,

	TIMERFD_CREATE = 33,
	TIMERFD_SETTIME = 36,

	HELFD_ATTACH = 10,
	HELFD_CLONE = 11
}

consts OpenMode uint32 {
	REGULAR = 1,
	HELFD = 2
}

consts FileType uint32 {
	FT_UNKNOWN = 0,
	FT_REGULAR = 1,
	FT_DIRECTORY = 2,
	FT_SYMLINK = 3,
	FT_FIFO = 4,
	FT_SOCKET = 5,
	FT_CHAR_DEVICE = 6,
	FT_BLOCK_DEVICE = 7
}

consts OpenFlags uint32 {
	OF_CREATE = 1,
	OF_EXCLUSIVE = 2,
	OF_NONBLOCK = 4,
	OF_CLOEXEC = 256,
	OF_RDONLY = 8,
	OF_WRONLY = 16,
	OF_RDWR = 32,
	OF_TRUNC = 64,
	OF_PATH = 128
}

message CntRequest 1 {
head(128):
	CntReqType request_type;

	tags {
		// used by INIT, EXEC and OPEN
		tag(2) string path;

		tag(34) int64 pid;

		// used by MOUNT
		tag(12) string target_path;
		tag(13) string fs_type;

		// used by OPEN
		tag(3) OpenFlags flags;
		tag(10) OpenMode mode;

		// used by READ, WRITE, SEEK_REL, SEEK_ABS, SEEK_END, MMAP, CLOSE, DUP2,
		// HELFD_ATTACH, HELFD_CLONE
		tag(4) int32 fd;

		// used by DUP2
		tag(7) int32 newfd;

		// used by READ
		tag(5) uint32 size;

		// used by WRITE
		tag(6) uint8[] buffer;

		// used by SEEK_ABS, SEEK_REL
		tag(11) int64 rel_offset;

		// used by FORK
		tag(8) uint64 child_sp;
		tag(9) uint64 child_ip;

		tag(24) uint64 address;
		tag(23) uint32 new_size;

		// Signal-specific stuff.
		tag(29) uint64 sig_number;
		tag(30) uint64 sig_mask;
		tag(31) uint64 sig_handler;
		tag(32) uint64 sig_restorer;

		tag(26) uint64 addr_size;
		tag(27) uint64 ctrl_size;

		tag(22) int32[] fds;
		tag(28) int32[] events;

		// used by EPOLL_CTL
		tag(17) uint64 cookie;

		// used by EPOLL_WAIT
		tag(25) int64 timeout;
		tag(42) int64 sigmask;
		tag(43) int32 sigmask_needed;

		tag(18) uint64 time_secs;
		tag(19) uint64 time_nanos;

		tag(20) uint64 interval_secs;
		tag(21) uint64 interval_nanos;

		tag(33) uint64 sigset;
	}
}

message SvrResponse 2 {
head(128):
	tags {
		tag(3) Errors error;

		tag(21) int64 size;

		tag(24) int64 flags;

		// returned by GET_PID
		tag(18) int64 pid;

		// returned by FSTAT
		tag(5) FileType file_type;

		// returned by FSTAT
		tag(4) uint64 file_size;

		// returned by FSTAT
		tag(13) int32 mode;

		// returned by FSTAT
		tag(22) uint64 fs_devnum;
		tag(14) uint64 fs_inode;

		tag(23) uint64 ref_devnum;

		// returned by FSTAT
		tag(17) uint64 num_links;

		// returned by FSTAT
		tag(15) int64 uid;
		tag(16) int64 gid;

		// returned by FSTAT
		tag(7) int64 atime_secs;
		tag(8) int64 atime_nanos;
		tag(9) int64 mtime_secs;
		tag(10) int64 mtime_nanos;
		tag(11) int64 ctime_secs;
		tag(12) int64 ctime_nanos;

		// return of OPEN
		tag(1) int32 fd;

		// returned by SEEK_ABS, SEEK_REL
		tag(6) uint64 offset;

		// Returned by SETSID.
		tag(31) int64 sid;

		// returned by TTY_NAME
		tag(19) string path;

		tag(20) int32[] fds;
		tag(25) int32[] events;

		// Returned by INOTIFY_ADD.
		tag(30) int32 wd;

		// Signal-specific stuff.
		tag(26) uint64 sig_mask;
		tag(27) uint64 sig_handler;
		tag(28) uint64 sig_restorer;

		// returned by GET_RESOURCE_USAGE
		tag(29) uint64 ru_user_time;
	}
}

message GetTidRequest 29 {
head(128):
	int32 dummy;
}

message VmMapRequest 26 {
head(128):
	int32 fd;
	uint32 mode;
	uint32 flags;
	int64 address_hint;
	int64 rel_offset;
	uint64 size;
}

message OpenAtRequest 64 {
head(128):
	int32 fd;
	OpenFlags flags;
	OpenMode mode;
tail:
	string path;
}

message CloseRequest 5 {
head(128):
	int32 fd;
}

message IsTtyRequest 22 {
head(128):
	int32 fd;
}

message RenameAtRequest 51 {
head(128):
	int32 fd;
	int32 newfd;
tail:
	string path;
	string target_path;
}

message GetUidRequest 67 {
head(128):
}

message SetUidRequest 68 {
head(128):
	uint64 uid;
}

message GetEuidRequest 69 {
head(128):
}

message SetEuidRequest 70 {
head(128):
	uint64 uid;
}

message GetGidRequest 71 {
head(128):
}

message GetEgidRequest 72 {
head(128):
}

message SetGidRequest 73 {
head(128):
	uint64 uid;
}

message SetEgidRequest 74 {
head(128):
	uint64 uid;
}

message UnlinkAtRequest 40 {
head(128):
	int32 fd;
	int32 flags;
tail:
	string path;
}

message FstatAtRequest 63 {
head(128):
	int32 fd;
	int32 flags;
tail:
	string path;
}

message MkfifoAtRequest 65 {
head(128):
	int32 fd;
	int32 mode;
tail:
	string path;
}

message LinkAtRequest 66 {
head(128):
	int32 fd;
	int32 newfd;
	int32 flags;
tail:
	string path;
	string target_path;
}

message FchmodAtRequest 75 {
head(128):
	int32 fd;
	int32 flags;
	int32 mode;
tail:
	string path;
}

message UtimensAtRequest 78 {
head(128):
	int32 fd;
	int32 flags;
	int32 mode;
	uint64 atimeSec;
	uint64 atimeNsec;
	uint64 mtimeSec;
	uint64 mtimeNsec;
tail:
	string path;
}

message RmdirRequest 77 {
head(128):
tail:
	string path;
}

message InotifyAddRequest 49 {
head(128):
	int32 fd;
	int32 flags;
tail:
	string path;
}

message InotifyCreateRequest 48 {
head(128):
	int32 flags;
}

message EventfdCreateRequest 60 {
head(128):
	uint32 initval;
	int32 flags;
}

message SocketRequest 35 {
head(128):
	int32 flags;
	int32 domain;
	int32 socktype;
	int32 protocol;
}

message SockpairRequest 25 {
head(128):
	int32 flags;
	int32 domain;
	int32 socktype;
	int32 protocol;
}

message AcceptRequest 19 {
head(128):
	int32 fd;
}

message MountRequest 21 {
head(128):
tail:
	string path;
	string target_path;
	string fs_type;
}

message SymlinkAtRequest 47 {
head(128):
	int32 fd;
tail:
	string path;
	string target_path;
}

message GetPpidRequest 79 {
head(128):
}

message MknodAtRequest 80 {
head(128):
	int32 dirfd;
	int32 mode;
	int32 device;
tail:
	string path;
}

message GetPgidRequest 81 {
head(128):
	int64 pid;
}

message SetPgidRequest 85 {
head(128):
	int64 pid;
	int64 pgid;
}

message GetSidRequest 82 {
head(128):
	int64 pid;
}

message IoctlFioclexRequest 83 {
head(128):
	int32 fd;	
}

message MemFdCreateRequest 84 {
head(128):
	int32 flags;
tail:
	string name;
}
