name: CI

on:
  push:
  pull_request:
    types: [opened, edited, synchronize, reopened]

jobs:
    cache-generic:
        name: Cache generic prerequisites
        runs-on: ubuntu-24.04
        outputs:
            bootstrap-commit: ${{ steps.head.outputs.bootstrap-commit }}
            mlibc-commit: ${{ steps.head.outputs.mlibc-commit }}
            caching-key: ${{ steps.head.outputs.caching-key }}
        steps:
          - id: head
            name: Get HEAD of bootstrap-managarm
            run: |
                remote="$(git ls-remote https://github.com/managarm/bootstrap-managarm.git refs/heads/master)"
                head="$(grep -Po '[0-9a-z]+(?=\t+refs/heads/master$)' <<< $remote)"
                echo "git ls-remote on bootstrap-managarm: $head"
                echo "bootstrap-commit=$head" > "$GITHUB_OUTPUT"
                mlibc_remote="$(git ls-remote https://github.com/managarm/mlibc.git refs/heads/master)"
                mlibc_head="$(grep -Po '[0-9a-z]+(?=\t+refs/heads/master$)' <<< $mlibc_remote)"
                echo "git ls-remote on mlibc: $mlibc_head"
                echo "mlibc-commit=$mlibc_head" > "$GITHUB_OUTPUT"
                echo "caching-key=$head-$mlibc_head" > "$GITHUB_OUTPUT"
          - id: cache-rootfs
            name: Cache rootfs
            uses: actions/cache@v4
            with:
                key: "rootfs-${{ steps.head.outputs.caching-key }}"
                # Note: must be kept in sync with the restore action (effectively part of the key).
                path: rootfs/
          - name: Download rootfs
            if: steps.cache-rootfs.outputs.cache-hit != 'true'
            run: |
                set -x
                curl -o rootfs.tar.gz https://repos.managarm.org/buildenv/managarm-buildenv.tar.gz
                tar -xzf rootfs.tar.gz

    cache-arch:
        strategy:
            matrix:
                arch: [x86_64, aarch64, riscv64]
        name: Cache ${{ matrix.arch }} prerequisites
        needs: cache-generic
        runs-on: ubuntu-24.04
        steps:
          - id: cache-xbps
            name: Cache xbps packages
            uses: actions/cache@v4
            with:
                key: "xbps-${{ matrix.arch }}-${{ needs.cache-generic.outputs.caching-key }}"
                # Note: must be kept in sync with the restore action (effectively part of the key).
                path: build/xbps-repo/*.xbps
          - name: Install prerequisites
            if: steps.cache-xbps.outputs.cache-hit != 'true'
            run: |
                set -x
                pip3 install xbstrap y4
                xbstrap prereqs cbuildrt xbps
          - name: Checkout bootstrap-managarm
            if: steps.cache-xbps.outputs.cache-hit != 'true'
            uses: actions/checkout@v2
            with:
                repository: managarm/bootstrap-managarm
                ref: ${{ needs.cache-generic.outputs.bootstrap-commit }}
                path: src/
          - name: Checkout Managarm
            uses: actions/checkout@v2
            with:
                path: src/managarm/
                fetch-depth: 0
          - name: Prepare src/ and build/
            if: steps.cache-xbps.outputs.cache-hit != 'true'
            run: |
                set -x
                touch src/managarm/checkedout.xbstrap
                mkdir build/
                cp src/managarm/ci/bootstrap-site-$CI_ARCH.yml build/bootstrap-site.yml
            env:
                CI_ARCH: ${{ matrix.arch }}
          - name: Pull xbps packages
            if: steps.cache-xbps.outputs.cache-hit != 'true'
            run: |
                set -x
                xbstrap init ../src
                xbstrap prereqs cbuildrt xbps
                sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
                sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
                xbstrap download-tool-archive host-python
                xbstrap install-tool host-bragi
                xbstrap pull-pack -c --deps-of managarm-system
                xbstrap pull-pack -c --deps-of managarm-kernel
                rm xbps-repo/managarm-system*.xbps
                rm xbps-repo/managarm-kernel*.xbps
            working-directory: build/

    build-package:
        strategy:
            matrix:
                arch: [x86_64, aarch64, riscv64]
                pkg: [managarm-kernel, managarm-system, managarm-kernel-uefi]
                exclude:
                  - arch: riscv64
                    pkg: managarm-system
                  - arch: aarch64
                    pkg: managarm-kernel-uefi
                  - arch: riscv64
                    pkg: managarm-kernel-uefi
        name: Build ${{ matrix.pkg }} on ${{ matrix.arch }}
        needs:
          - cache-generic
          - cache-arch
        runs-on: ubuntu-24.04
        steps:
          - name: Permit unprivileged user namespaces
            run: |
                set -x
                sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
                sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
          - name: Install prerequisites
            run: |
                set -x
                sudo apt-get update
                sudo apt-get install pcre2-utils
                pip3 install xbstrap y4
                xbstrap prereqs cbuildrt xbps
          - name: Restore rootfs cache
            uses: actions/cache/restore@v4
            with:
                key: "rootfs-${{ needs.cache-generic.outputs.caching-key }}"
                # Note: must be kept in sync with the cache action (effectively part of the key).
                path: rootfs/
                fail-on-cache-miss: true
          - name: Restore xbps cache
            uses: actions/cache/restore@v4
            with:
                key: "xbps-${{ matrix.arch }}-${{ needs.cache-generic.outputs.caching-key }}"
                # Note: must be kept in sync with the restore action (effectively part of the key).
                path: build/xbps-repo/*.xbps
                fail-on-cache-miss: true
          - name: Check for requested bootstrap-managarm PR
            env:
              PR_BODY: ${{ github.event.pull_request.body }}
            run: |
              pr_num=$(echo "$PR_BODY" | pcre2grep -o1 "^Depends on managarm\/bootstrap-managarm#([0-9]+)" | head -n1)
              pr_ref=""
              if [ ! -z "${pr_num}" ]; then
                pr_ref="refs/pull/$pr_num/head"
              fi
              echo "bootstrap_ref=${pr_ref}" >> "$GITHUB_ENV"
          - name: Checkout bootstrap-managarm
            uses: actions/checkout@v2
            with:
                repository: managarm/bootstrap-managarm
                ref: ${{env.bootstrap_ref}}
                path: src/
          - name: Checkout Managarm
            uses: actions/checkout@v2
            with:
                path: src/managarm/
                fetch-depth: 0
          - name: Prepare src/ and build/
            run: |
                set -x
                touch src/managarm/checkedout.xbstrap
                cp src/managarm/ci/bootstrap-site-$CI_ARCH.yml build/bootstrap-site.yml
            env:
                CI_ARCH: ${{ matrix.arch }}
          - name: Build ${{ matrix.pkg }} package
            run: |
                set -x
                xbstrap init ../src
                ~/.xbstrap/bin/xbps-rindex -fa xbps-repo/*.xbps
                xbstrap pack $CI_BUILD_PKG
            env:
                CI_BUILD_PKG: ${{ matrix.pkg }}
                XBPS_ARCH: ${{ matrix.arch }}
            working-directory: build/
          - name: Upload artifact
            uses: actions/upload-artifact@v4
            with:
                name: "${{ matrix.arch }}-${{ matrix.pkg }}"
                path: "build/xbps-repo/${{ matrix.pkg }}*.xbps"
                if-no-files-found: error
          - name: Run clang-tidy on ${{ matrix.pkg }} on ${{ matrix.arch }}
            run: |
                xbstrap run --pkg $CI_BUILD_PKG clang-tidy
            working-directory: build/
            env:
                CI_BUILD_PKG: ${{ matrix.pkg }}

    test-image:
        strategy:
            matrix:
                arch: [x86_64]
        name: Test ${{ matrix.arch }} image
        needs:
          - cache-generic
          - cache-arch
          - build-package
        runs-on: ubuntu-24.04
        steps:
          - name: Install prerequisites
            run: |
                set -x
                sudo apt-get update
                sudo apt-get install qemu-system-x86
                pip3 install xbstrap y4
                xbstrap prereqs xbps
          - name: Restore xbps cache
            uses: actions/cache/restore@v4
            with:
                key: "xbps-${{ matrix.arch }}-${{ needs.cache-generic.outputs.caching-key }}"
                # Note: must be kept in sync with the restore action (effectively part of the key).
                path: build/xbps-repo/*.xbps
                fail-on-cache-miss: true
          - name: Download managarm-kernel
            uses: actions/download-artifact@v4
            with:
                name: "${{ matrix.arch }}-managarm-kernel"
                path: build/xbps-repo/
          - name: Download managarm-system
            uses: actions/download-artifact@v4
            with:
                name: "${{ matrix.arch }}-managarm-system"
                path: build/xbps-repo/
          - name: Check for requested bootstrap-managarm PR
            env:
              PR_BODY: ${{ github.event.pull_request.body }}
            run: |
              pr_num=$(echo "$PR_BODY" | pcre2grep -o1 "^Depends on managarm\/bootstrap-managarm#([0-9]+)" | head -n1)
              pr_ref=""
              if [ ! -z "${pr_num}" ]; then
                pr_ref="refs/pull/$pr_num/head"
              fi
              echo "bootstrap_ref=${pr_ref}" >> "$GITHUB_ENV"
          - name: Checkout bootstrap-managarm
            uses: actions/checkout@v2
            with:
                repository: managarm/bootstrap-managarm
                ref: ${{env.bootstrap_ref}}
                path: src/
          - name: Generate image
            run: |
                set -x
                curl -o image.xz https://builds.managarm.org/repos/files/managarm/latest/image.xz
                unxz image.xz
                ~/.xbstrap/bin/xbps-rindex -fa xbps-repo/*.xbps
                ../src/scripts/update-image.py -m loopback mount
                # For now we need root because the mount point is owned by root
                # and xbps uses access(mountpoint/, W_OK) to test if it can write.
                sudo --preserve-env=XBPS_ARCH ~/.xbstrap/bin/xbps-install -fy -R xbps-repo/ -r mountpoint/ managarm-kernel managarm-system
                ../src/scripts/update-image.py unmount
            env:
                XBPS_ARCH: ${{ matrix.arch }}
            working-directory: build/
          - name: Test ${{ matrix.pkg }} package
            run: |
                ../src/scripts/test-image.py
            working-directory: build/
