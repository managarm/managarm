
syntax = "proto2";
package managarm.fs;
option optimize_for = LITE_RUNTIME;

enum Errors {
	SUCCESS = 0;
	ILLEGAL_REQUEST = 3;
	FILE_NOT_FOUND = 1;
	END_OF_FILE = 2;
	ILLEGAL_ARGUMENT = 4;
	WOULD_BLOCK = 5;
	SEEK_ON_PIPE = 6;
	BROKEN_PIPE = 7;
}

enum FileType {
	REGULAR = 1;
	DIRECTORY = 2;
	SYMLINK = 3;
	SOCKET = 4;
}

enum Command {
	TTY_GET_ATTR = 1;
	TTY_SET_ATTR = 2;
}

enum OpenFlags {
	OF_NONBLOCK = 1;
}

enum FlockFlags {
	LOCK_SH = 1;
	LOCK_EX = 2;
	LOCK_NB = 4;
	LOCK_UN = 8;
}

enum FileCaps {
	FC_STATUS_PAGE = 1;
}

enum CntReqType {
	NONE = 0;

	// Device API.
	DEV_MOUNT = 11;
	DEV_OPEN = 14;

	SB_CREATE_REGULAR = 27;

	// File node API.
	NODE_GET_STATS = 5;
	NODE_GET_LINK = 12;
	NODE_LINK = 28;
	NODE_MKDIR = 35;
	NODE_UNLINK = 29;
	NODE_OPEN = 13;
	NODE_READ_SYMLINK = 15;

	// Primary file API.
	FILE_POLL = 18;

	// File passthrough API.
	// TODO: Add a PT_ prefix to those requests.
	READ = 2;
	PT_READ_ENTRIES = 16;
	PT_TRUNCATE = 20;
	PT_FALLOCATE = 19;
	PT_BIND = 21;
	PT_LISTEN = 23;
	PT_CONNECT = 22;
	PT_SOCKNAME = 24;
	PT_GET_FILE_FLAGS = 30;
	PT_SET_FILE_FLAGS = 31;
	PT_RECVMSG = 33;
	PT_SENDMSG = 34;

	WRITE = 3;
	SEEK_ABS = 6;
	SEEK_REL = 7;
	SEEK_EOF = 8;

	PT_IOCTL = 17;
	PT_GET_OPTION = 26;
	PT_SET_OPTION = 25;

	// Socket API
	CREATE_SOCKET = 32;

	// Legacy API.
	OPEN = 1;
	CONNECT = 10;
	MMAP = 9;
	CLOSE = 4;

	FLOCK = 73;

	RENAME = 36;

	PT_PREAD = 37;
}

message Rect {
	optional int32 x1 = 1;
	optional int32 y1 = 2;
	optional int32 x2 = 3;
	optional int32 y2 = 4;
}

message CntRequest {
	optional CntReqType req_type = 1;

	// used by OPEN_ENTRY
	optional string path = 2;

	// used by SOCKET_CREATE
	optional int64 type = 49;
	optional int64 protocol = 50;

	// used by DEV_OPEN
	optional uint32 flags = 39;

	// used by FSTAT, READ, WRITE, SEEK_ABS, SEEK_REL, SEEK_EOF, MMAP and CLOSE
	optional int32 fd = 4;

	// used by READ and WRITE
	optional int32 size = 5;
	optional bytes buffer = 6;

	// used by RECVMSG
	optional uint64 addr_size = 51;
	optional uint64 ctrl_size = 52;

	// used by SENDMSG
	repeated uint32 fds = 53;

	// used by RENAME
	optional uint64 inode_source = 54;
	optional uint64 inode_target = 55;
	optional string old_name = 56;
	optional string new_name = 57;

	// used by SEEK_ABS, SEEK_REL and SEEK_EOF
	optional int64 rel_offset = 7;

	// used by PT_IOCTL, PT_SET_OPTION.
	optional int64 command = 8;

	//used by FLOCK
	optional int32 flock_flags = 9;

	// used by PT_SET_OPTION.
	optional int32 value = 42;

	// Sequence number for FILE_POLL.
	optional uint64 sequence = 38;

	// PTS and TTY ioctls.
	optional int32 pts_width = 43;
	optional int32 pts_height = 44;
	optional int32 pts_pixel_width = 45;
	optional int32 pts_pixel_height = 46;

	// DRM ioctls.
	optional uint64 drm_capability = 18;

	optional uint32 drm_connector_id = 19;

	optional uint32 drm_encoder_id = 20;

	optional uint32 drm_max_modes = 47;

	optional uint32 drm_height = 21;
	optional uint32 drm_width = 22;
	optional uint32 drm_bpp = 23;
	optional uint32 drm_flags = 24;

	optional uint32 drm_pitch = 25;
	optional uint32 drm_depth = 26;

	optional uint32 drm_handle = 27;

	optional uint32 drm_crtc_id = 28;

	repeated uint32 drm_connector_ids = 29;
	optional uint32 drm_x = 30;
	optional uint32 drm_y = 31;
	optional uint32 drm_fb_id = 33;
	optional uint32 drm_mode_valid = 34;

	optional uint32 drm_color = 35;
	repeated Rect drm_clips = 36;

	optional uint64 drm_cookie = 37;

	optional int32 input_type = 40;
	optional int32 input_clock = 41;

	optional int64 offset = 58;
}

message SvrResponse {
	optional int32 error = 3;

	// used by PT_READ_ENTRIES
	optional string path = 19;

	// returned by FSTAT and OPEN
	optional FileType file_type = 5;

	// returned by NODE_GET_LINK
	optional int64 id = 18;

	// returned by FSTAT
	optional uint64 file_size = 4;

	// returned by FSTAT
	optional int32 mode = 13;

	optional uint32 caps = 64;

	// returned by FSTAT
	optional uint64 inode_num = 14;

	// returned by FSTAT
	optional uint64 num_links = 17;

	// returned by FSTAT
	optional int64 uid = 15;
	optional int64 gid = 16;

	// returned by FSTAT
	optional int64 atime_secs = 7;
	optional int64 atime_nanos = 8;
	optional int64 mtime_secs = 9;
	optional int64 mtime_nanos = 10;
	optional int64 ctime_secs = 11;
	optional int64 ctime_nanos = 12;

	// returned by OPEN
	optional int32 fd = 1;

	// returned by SEEK_ABS, SEEK_REL and SEEK_EOF
	optional uint64 offset = 6;

	// returned by PT_IOCTL
	optional uint64 result = 20;

	// Sequence number for FILE_POLL.
	optional uint64 sequence = 60;

	// Event edges and current events for FILE_POLL.
	optional int32 edges = 61;
	optional int32 status = 62;

	optional int64 pid = 71;

	// returned by PT_SENDMSG
	optional int64 size = 76;

	// PTS and TTY ioctls.
	optional int32 pts_index = 63;
	optional int32 pts_width = 72;
	optional int32 pts_height = 73;
	optional int32 pts_pixel_width = 74;
	optional int32 pts_pixel_height = 75;

	// DRM ioctls.
	optional uint64 drm_value = 21;

	repeated uint32 drm_fb_ids = 22;
	repeated uint32 drm_crtc_ids = 23;
	repeated uint32 drm_connector_ids = 24;
	repeated uint32 drm_encoder_ids = 25;
	optional int32 drm_min_width = 26;
	optional int32 drm_max_width = 27;
	optional int32 drm_min_height = 28;
	optional int32 drm_max_height = 29;

	repeated uint32 drm_encoders = 30;
	optional uint32 drm_encoder_id = 32;
	optional uint32 drm_connector_type = 33;
	optional uint32 drm_connector_type_id = 34;
	optional uint32 drm_connection = 35;
	optional uint32 drm_mm_width = 36;
	optional uint32 drm_mm_height = 37;
	optional uint32 drm_subpixel = 38;

	optional uint32 drm_encoder_type = 39;
	optional uint32 drm_crtc_id = 40;
	optional uint32 drm_possible_crtcs = 41;
	optional uint32 drm_possible_clones = 42;

	optional uint32 drm_handle = 43;
	optional uint32 drm_pitch = 44;
	optional uint64 drm_size = 45;

	optional uint32 drm_fb_id = 46;

	optional uint64 drm_offset = 47;

	optional uint32 drm_x = 48;
	optional uint32 drm_y = 49;
	optional uint32 drm_gamma_size = 50;
	optional uint32 drm_mode_valid = 51;

	optional uint32 drm_num_modes = 53;

	optional uint32 drm_version_major = 54;
	optional uint32 drm_version_minor = 55;
	optional uint32 drm_version_patchlevel = 56;
	optional string drm_driver_name = 57;
	optional string drm_driver_date = 58;
	optional string drm_driver_desc = 59;

	optional int32 input_value = 65;
	optional int32 input_min = 66;
	optional int32 input_max = 67;
	optional int32 input_fuzz = 68;
	optional int32 input_flat = 69;
	optional int32 input_resolution = 70;

	optional int32 flags = 77;
}
